package v1service

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/DataDog/datadog-go/v5/statsd"
)

// Stats is a task that reads events generated by the Events task and writes
// them to StatsD.
type Stats struct {
	// StatsD configures the StatsD host where metrics are written.
	StatsD *StatsD

	// Source configures the channel where the Events task writes it's events.
	Source chan *Event

	// Logger optionally configures the logger where debug information is
	// written to.
	Logger *slog.Logger
}

func (s *Stats) TaskName() string {
	return "Stats"
}

func (s *Stats) RunTask(ctx context.Context) error {
	stats, err := statsd.New(s.StatsD.Host, statsd.WithoutTelemetry())
	if err != nil {
		return fmt.Errorf("statsd: %w", err)
	}
	defer stats.Close()

	for {
		select {
		case event := <-s.Source:
			s.handleEvent(stats, event)

		case <-ctx.Done():
			return ctx.Err()
		}
	}
}

func (s *Stats) handleEvent(stats *statsd.Client, event *Event) {
	tags := []string{
		"nats_account:" + event.Client.Account,
		"nats_stream:" + event.Consumer.Stream,
		"nats_consumer:" + event.Consumer.Name,
	}

	stats.Gauge("nats.jetstream.consumer.delivered", float64(event.Consumer.Delivered.Consumer), tags, 1)
	stats.Gauge("nats.jetstream.consumer.delivered_stream", float64(event.Consumer.Delivered.Stream), tags, 1)
	stats.Gauge("nats.jetstream.consumer.ack_floor", float64(event.Consumer.AckFloor.Consumer), tags, 1)
	stats.Gauge("nats.jetstream.consumer.ack_floor_stream", float64(event.Consumer.AckFloor.Stream), tags, 1)
	stats.Gauge("nats.jetstream.consumer.ack_pending", float64(event.Consumer.NumAckPending), tags, 1)
	stats.Gauge("nats.jetstream.consumer.redelivered", float64(event.Consumer.NumRedelivered), tags, 1)
	stats.Gauge("nats.jetstream.consumer.waiting", float64(event.Consumer.NumWaiting), tags, 1)
	stats.Gauge("nats.jetstream.consumer.pending", float64(event.Consumer.NumPending), tags, 1)

	s.Logger.Debug("stats written", slog.Any("tags", tags))
}
